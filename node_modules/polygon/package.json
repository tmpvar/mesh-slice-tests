{
  "name": "polygon",
  "version": "0.1.0",
  "description": "utility for working with polygons (arrays of vec2s)",
  "main": "polygon.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "vec2": "~1.3.2",
    "segseg": "~0.2.0"
  },
  "devDependencies": {
    "istanbul": "~0.2.4"
  },
  "scripts": {
    "test": "mocha test/test.js -R spec",
    "cover": "istanbul cover _mocha -- test/test.js -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tmpvar/polygon.js.git"
  },
  "keywords": [
    "polygon",
    "vec2",
    "geometry",
    "2d"
  ],
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com"
  },
  "license": "MIT",
  "readme": "# polygon.js\n\n## Install\n\n\n__nodejs__\n\n`npm install polygon`\n\n## Usage\n\nCreate a new polygon:\n\n```javascript\nvar p = new Polygon([\n  Vec2(0, 0),\n  Vec2(10, 0),\n  Vec2(0, 10)\n]);\n\n```\n\nYou can pass an array of `Vec2`s, arrays `[x, y]`, or objects `{ x: 10, y: 20 }`\n\n\n## Supported Methods\n\n* `each(function(prev, current, next, idx) {})`\n* `point(idx)` - returns the point at index `idx`. note: this will wrap in both directions\n* `dedupe(returnNew)` - ensure all of the points are unique\n* `remove(vec2)` - remove the specified `vec2` from this polygon\n* `clean(returnNew)` - removes contiguous points that are the same\n* `winding()` - returns the direction in which a polygon is wound (true === clockwise)\n* `rewind(bool)` - rewinds the polygon in the specified direction (true === clockwise)\n* `area()` - computes the area of the polygon\n* `closestPointTo(vec2)` - finds the closest point in this polygon to `vec2`\n* `center()` - returns a `Vec2` at the center of the AABB\n* `scale(amount, origin, returnNew)` - scales this polygon around `origin` (default is `this.center()`) and will return a new polygon if requested with `returnNew`\n* `containsPoint(vec2)` - returns true if `vec2` is inside the polygon\n* `containsPolygon(poly)` - returns true if `poly` is completely contained in this polygon\n* `aabb()` - returns an object `{x:_, y:_, w:_, h:_}` representing the axis-aligned bounding box of this polygyon\n* `offset(amount)` - performs an offset/buffering operation on this polygon and returns a new one\n* `line(index)` - return an array `[startpoint, endpoint]` representing the line at the specified `index`\n* `lines(function(start, end, index) {})` - iterate over the lines in this polygon\n* `selfIntersections` - find self-intersections and return them as a new polygon\n* `pruneSelfIntersections` - remove self intersections from this polygon.  returns an array of polygons\n* `length` - returns the number of points in this polygon\n* `clone` - return a new instance of this polygon\n* `rotate(rads, vec2, returnNew)` - rotate by origin `vec2` (default `this.center()`) by radians `rads` and return a clone if `returnNew` is specified\n* `rotate(vec2, returnNew)` - translate by `vec2` and return a clone if `returnNew` is specified\n* `equal(poly)` - return true if this polygon has the same components and the incoming `poly`\n* `contains(thing)` - works with an array of vec2's, an object containing a `.position` and `.radius`, an object populated with x1,y1,x2,y2, an object populated with x,y,w,h, and an object populated with x,y,width,height.  See the tests for more info\n\n## license\n\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tmpvar/polygon.js/issues"
  },
  "homepage": "https://github.com/tmpvar/polygon.js",
  "_id": "polygon@0.1.0",
  "_from": "polygon@"
}
